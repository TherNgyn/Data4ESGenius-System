import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import joblib
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import warnings
warnings.filterwarnings("ignore")


# C√†i ƒë·∫∑t trang
st.set_page_config(
    page_title="C√¥ng c·ª• ƒë√°nh gi√° ESG",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("C√¥ng c·ª• ƒë√°nh gi√° ESG (Environmental, Social, and Governance)")
st.markdown("Nh·∫≠p c√°c ch·ªâ s·ªë ƒë·ªÉ ƒë√°nh gi√° hi·ªáu su·∫•t ESG c·ªßa d·ª± √°n")

# Function ƒë·ªÉ t√≠nh ƒëi·ªÉm ESG
def calculate_esg_score(df):
    """
    T√≠nh ƒëi·ªÉm ESG t·ª´ c√°c ch·ªâ s·ªë v√† ph√¢n lo·∫°i th√†nh c√°c score range
    """
    # T·∫°o m·ªôt b·∫£n sao ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªØ li·ªáu g·ªëc
    result_df = df.copy()
    
    # 1. T√≠nh ƒëi·ªÉm percentile cho m·ªói ch·ªâ s·ªë
    for feature in result_df.columns:
        if pd.api.types.is_numeric_dtype(result_df[feature]):
            # X√°c ƒë·ªãnh c·ª±c t√≠nh c·ªßa ch·ªâ s·ªë (c√†ng cao c√†ng t·ªët hay c√†ng th·∫•p c√†ng t·ªët)
            # M·∫∑c ƒë·ªãnh: c√†ng cao c√†ng t·ªët (v√≠ d·ª•: Access to electricity)
            # ƒê·∫£o ng∆∞·ª£c: c√†ng th·∫•p c√†ng t·ªët (v√≠ d·ª•: CO2 emissions, Gini index)
            if feature in ['CO2 emissions', 'Methane emissions', 'Nitrous oxide emissions',
                         'Adjusted savings: natural resources depletion', 'Adjusted savings: net forest depletion',
                         'Mortality rate', 'Unemployment', 'Heat Index 35',
                         'Level of water stress: freshwater withdrawal as a proportion of available freshwater resources',
                         'Population density']:
                # ƒê·∫£o ng∆∞·ª£c percentile cho c√°c ch·ªâ s·ªë m√† gi√° tr·ªã th·∫•p = hi·ªáu su·∫•t t·ªët
                result_df[f"{feature}_percentile"] = 100 - result_df[feature]
            else:
                # Percentile b√¨nh th∆∞·ªùng cho c√°c ch·ªâ s·ªë m√† gi√° tr·ªã cao = hi·ªáu su·∫•t t·ªët
                result_df[f"{feature}_percentile"] = result_df[feature]
    
    # 2. Ph√¢n lo·∫°i ch·ªâ s·ªë th√†nh 3 nh√≥m E, S, G
    # Danh s√°ch ch·ªâ s·ªë m√¥i tr∆∞·ªùng (Environmental)
    e_features = ['CO2 emissions', 'Methane emissions', 'Nitrous oxide emissions',
                 'Adjusted savings: natural resources depletion', 'Adjusted savings: net forest depletion',
                 'Agricultural land', 'Annual freshwater withdrawals', 
                 'Cooling Degree Days', 'Forest area', 'Heat Index 35',
                 'Heating Degree Days', 'Land Surface Temperature',
                 'Level of water stress: freshwater withdrawal as a proportion of available freshwater resources',
                 'Renewable energy consumption', 'Standardised Precipitation-Evapotranspiration Index']
    
    # Danh s√°ch ch·ªâ s·ªë x√£ h·ªôi (Social)
    s_features = ['Access to clean fuels and technologies for cooking', 
                 'Access to electricity',
                 'People using safely managed drinking water services',
                 'People using safely managed sanitation services',
                 'School enrollment', 'Food production index',
                 'Fertility rate', 'Labor force participation rate', 
                 'Life expectancy at birth', 'Mortality rate', 
                 'Population ages 65 and above', 'Population density',
                 'Ratio of female to male labor force participation rate', 'Unemployment']
    
    # Danh s√°ch ch·ªâ s·ªë qu·∫£n tr·ªã (Governance)
    g_features = ['GDP growth', 'Individuals using the Internet',
                 'Agriculture', 'Control of Corruption: Estimate', 
                 'Government Effectiveness: Estimate', 'Net migration', 
                 'Patent applications', 'Political Stability and Absence of Violence/Terrorism: Estimate',
                 'Proportion of seats held by women in national parliaments',
                 'Regulatory Quality: Estimate', 'Rule of Law: Estimate', 
                 'Scientific and technical journal articles',
                 'Voice and Accountability: Estimate']
    
    # T·∫°o danh s√°ch c√°c c·ªôt percentile cho m·ªói nh√≥m
    e_percentile_features = [f"{feature}_percentile" for feature in e_features 
                           if f"{feature}_percentile" in result_df.columns]
    s_percentile_features = [f"{feature}_percentile" for feature in s_features 
                           if f"{feature}_percentile" in result_df.columns]
    g_percentile_features = [f"{feature}_percentile" for feature in g_features 
                           if f"{feature}_percentile" in result_df.columns]
    
    # 3. T√≠nh ƒëi·ªÉm ESG (trung b√¨nh c·ªông c√≥ tr·ªçng s·ªë)
    # ƒêi·ªÉm E - Environmental
    if e_percentile_features:
        result_df['E_score'] = result_df[e_percentile_features].mean(axis=1)/100
    else:
        result_df['E_score'] = np.nan
        
    # ƒêi·ªÉm S - Social
    if s_percentile_features:
        result_df['S_score'] = result_df[s_percentile_features].mean(axis=1)/100
    else:
        result_df['S_score'] = np.nan
        
    # ƒêi·ªÉm G - Governance
    if g_percentile_features:
        result_df['G_score'] = result_df[g_percentile_features].mean(axis=1)/100
    else:
        result_df['G_score'] = np.nan
    
    # T√≠nh ƒëi·ªÉm ESG t·ªïng th·ªÉ (thang ƒëi·ªÉm 0-100)
    valid_scores = [score for score in [result_df['E_score'], result_df['S_score'], result_df['G_score']] 
                   if not score.isna().all()]
    
    if valid_scores:
        result_df['ESG_score'] = pd.concat(valid_scores, axis=1).mean(axis=1) * 100
    else:
        result_df['ESG_score'] = np.nan
    
    # 4. G√°n nh√£n score range
    result_df['score_range'] = pd.cut(result_df['ESG_score'], 
                              bins=[0, 25, 50, 75, 100], 
                              labels=['First Quartile', 'Second Quartile', 'Third Quartile', 'Fourth Quartile'])
    
    return result_df

# Function ƒë·ªÉ load ho·∫∑c train m√¥ h√¨nh
@st.cache_resource
def get_model():
    try:
        # Th·ª≠ t·∫£i m√¥ h√¨nh ƒë√£ l∆∞u
        model = joblib.load('esg_model.pkl')
        scaler = joblib.load('esg_scaler.pkl')
        feature_order = joblib.load('esg_features.pkl') 
        st.success("ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng!")
    except:
        st.warning("Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh ƒë√£ l∆∞u. B·∫°n c·∫ßn upload d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh m·ªõi.")
        model = None
        scaler = None
        feature_order = None
    
    return model, scaler, feature_order

# T·∫£i m√¥ h√¨nh
model, scaler, feature_order = get_model()

# Sidebar ƒë·ªÉ ch·ªçn ch·∫ø ƒë·ªô ƒë√°nh gi√°
st.sidebar.title("T√πy ch·ªçn")
evaluation_mode = st.sidebar.radio(
    "Ch·ªçn ch·∫ø ƒë·ªô ƒë√°nh gi√°:",
    ["Nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng", "Upload file d·ªØ li·ªáu", "Train m√¥ h√¨nh m·ªõi"]
)

# Danh s√°ch c√°c ch·ªâ s·ªë ph√¢n theo tr·ª• c·ªôt ESG
environmental_indicators = ['CO2 emissions', 'Methane emissions', 'Nitrous oxide emissions',
                 'Adjusted savings: natural resources depletion', 'Adjusted savings: net forest depletion',
                 'Agricultural land', 'Annual freshwater withdrawals', 
                 'Cooling Degree Days', 'Forest area', 'Heat Index 35',
                 'Heating Degree Days', 'Land Surface Temperature',
                 'Level of water stress: freshwater withdrawal as a proportion of available freshwater resources',
                 'Renewable energy consumption', 'Standardised Precipitation-Evapotranspiration Index']

social_indicators = ['Access to clean fuels and technologies for cooking', 
                 'Access to electricity',
                 'People using safely managed drinking water services',
                 'People using safely managed sanitation services',
                 'School enrollment', 'Food production index',
                 'Fertility rate', 'Labor force participation rate', 
                 'Life expectancy at birth', 'Mortality rate', 
                 'Population ages 65 and above', 'Population density',
                 'Ratio of female to male labor force participation rate', 'Unemployment']

governance_indicators = ['GDP growth', 'Individuals using the Internet',
                 'Agriculture', 'Control of Corruption: Estimate', 
                 'Government Effectiveness: Estimate', 'Net migration', 
                 'Patent applications', 'Political Stability and Absence of Violence/Terrorism: Estimate',
                 'Proportion of seats held by women in national parliaments',
                 'Regulatory Quality: Estimate', 'Rule of Law: Estimate', 
                 'Scientific and technical journal articles',
                 'Voice and Accountability: Estimate']

# Function ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
def display_results(results):
    # Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë ESG
    col1, col2, col3, col4 = st.columns(4)
    
    col1.metric("ƒêi·ªÉm Environmental", f"{results['E_score'].values[0]*10:.1f}/10")
    col2.metric("ƒêi·ªÉm Social", f"{results['S_score'].values[0]*10:.1f}/10")
    col3.metric("ƒêi·ªÉm Governance", f"{results['G_score'].values[0]*10:.1f}/10")
    col4.metric("ƒêi·ªÉm ESG T·ªïng th·ªÉ", f"{results['ESG_score'].values[0]:.1f}/100")
    
    # Hi·ªÉn th·ªã ph√¢n lo·∫°i
    score_range = results['score_range'].values[0]
    
    # X√°c ƒë·ªãnh m√†u s·∫Øc cho ph√¢n lo·∫°i
    if score_range == 'First Quartile':
        color = 'red'
        interpretation = "Hi·ªáu su·∫•t ESG k√©m. C·∫ßn c·∫£i thi·ªán ƒë√°ng k·ªÉ trong h·∫ßu h·∫øt c√°c lƒ©nh v·ª±c."
    elif score_range == 'Second Quartile':
        color = 'orange'
        interpretation = "Hi·ªáu su·∫•t ESG kh√°. ƒê√£ ƒë·∫°t ƒë∆∞·ª£c m·ªôt s·ªë ti·∫øn b·ªô nh∆∞ng v·∫´n c·∫ßn c·∫£i thi·ªán nhi·ªÅu lƒ©nh v·ª±c."
    elif score_range == 'Third Quartile':
        color = 'lightgreen'
        interpretation = "Hi·ªáu su·∫•t ESG t·ªët. ƒêang ƒëi ƒë√∫ng h∆∞·ªõng v·ªõi nhi·ªÅu lƒ©nh v·ª±c ƒë·∫°t hi·ªáu qu·∫£ cao."
    else:
        color = 'green'
        interpretation = "Hi·ªáu su·∫•t ESG xu·∫•t s·∫Øc. ƒêang d·∫´n ƒë·∫ßu trong ph·∫ßn l·ªõn c√°c lƒ©nh v·ª±c ESG."
    
    st.markdown(f"### Ph√¢n lo·∫°i ESG: <span style='color:{color}'>{score_range}</span>", unsafe_allow_html=True)
    st.markdown(f"**Di·ªÖn gi·∫£i:** {interpretation}")
    
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.subheader("Ph√¢n t√≠ch chi ti·∫øt")
    
    # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì radar
    fig, ax = plt.subplots(1, 2, figsize=(15, 6))
    
    # Bi·ªÉu ƒë·ªì c·ªôt cho ƒëi·ªÉm s·ªë 3 tr·ª• c·ªôt
    scores = [results['E_score'].values[0]*10, results['S_score'].values[0]*10, results['G_score'].values[0]*10]
    colors = ['green', 'blue', 'red']
    ax[0].bar(['Environmental', 'Social', 'Governance'], scores, color=colors)
    ax[0].set_ylim(0, 10)
    ax[0].set_title('ƒêi·ªÉm s·ªë 3 tr·ª• c·ªôt ESG')
    ax[0].set_ylabel('ƒêi·ªÉm (0-10)')
    
    # Bi·ªÉu ƒë·ªì tr√≤n cho t·ª∑ tr·ªçng c·ªßa m·ªói tr·ª• c·ªôt
    ax[1].pie(scores, labels=['Environmental', 'Social', 'Governance'], 
              autopct='%1.1f%%', colors=colors, startangle=90)
    ax[1].set_title('T·ª∑ tr·ªçng c√°c tr·ª• c·ªôt trong ƒëi·ªÉm ESG')
    
    st.pyplot(fig)
    
    # ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
    st.subheader("ƒê·ªÅ xu·∫•t c·∫£i thi·ªán")
    
    # X√°c ƒë·ªãnh lƒ©nh v·ª±c y·∫øu nh·∫•t
    weakest_pillar = min([('Environmental', results['E_score'].values[0]), 
                          ('Social', results['S_score'].values[0]), 
                          ('Governance', results['G_score'].values[0])],
                        key=lambda x: x[1])[0]
    
    if weakest_pillar == 'Environmental':
        st.markdown("""
        **∆Øu ti√™n c·∫£i thi·ªán lƒ©nh v·ª±c M√¥i tr∆∞·ªùng:**
        - Gi·∫£m ph√°t th·∫£i kh√≠ nh√† k√≠nh v√† chuy·ªÉn ƒë·ªïi sang nƒÉng l∆∞·ª£ng s·∫°ch
        - TƒÉng c∆∞·ªùng b·∫£o v·ªá t√†i nguy√™n thi√™n nhi√™n v√† ƒëa d·∫°ng sinh h·ªçc
        - Ph√°t tri·ªÉn chi·∫øn l∆∞·ª£c th√≠ch ·ª©ng v·ªõi bi·∫øn ƒë·ªïi kh√≠ h·∫≠u
        - √Åp d·ª•ng c√°c bi·ªán ph√°p s·ª≠ d·ª•ng t√†i nguy√™n hi·ªáu qu·∫£ h∆°n
        """)
    elif weakest_pillar == 'Social':
        st.markdown("""
        **∆Øu ti√™n c·∫£i thi·ªán lƒ©nh v·ª±c X√£ h·ªôi:**
        - N√¢ng cao ch·∫•t l∆∞·ª£ng gi√°o d·ª•c v√† y t·∫ø
        - C·∫£i thi·ªán ƒëi·ªÅu ki·ªán s·ªëng v√† gi·∫£m b·∫•t b√¨nh ƒë·∫≥ng x√£ h·ªôi
        - Th√∫c ƒë·∫©y b√¨nh ƒë·∫≥ng gi·ªõi v√† h√≤a nh·∫≠p x√£ h·ªôi
        - ƒê·∫£m b·∫£o quy·ªÅn lao ƒë·ªông v√† c√°c ti√™u chu·∫©n lao ƒë·ªông
        """)
    else:
        st.markdown("""
        **∆Øu ti√™n c·∫£i thi·ªán lƒ©nh v·ª±c Qu·∫£n tr·ªã:**
        - TƒÉng c∆∞·ªùng minh b·∫°ch v√† tr√°ch nhi·ªám gi·∫£i tr√¨nh
        - C·∫£i thi·ªán hi·ªáu qu·∫£ c·ªßa b·ªô m√°y ch√≠nh ph·ªß v√† ch·ªëng tham nh≈©ng
        - X√¢y d·ª±ng c√°c ch√≠nh s√°ch th√∫c ƒë·∫©y ph√°t tri·ªÉn b·ªÅn v·ªØng
        - ƒê·∫£m b·∫£o s·ª± tham gia c·ªßa c√°c b√™n li√™n quan trong qu√° tr√¨nh ra quy·∫øt ƒë·ªãnh
        """)

# Ch·∫ø ƒë·ªô nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng
# Ch·∫ø ƒë·ªô nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng
if evaluation_mode == "Nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng":
    st.header("Nh·∫≠p c√°c ch·ªâ s·ªë ESG")
    
    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if 'all_values' not in st.session_state:
        st.session_state.all_values = {indicator: 50.0 for indicator in 
                                       environmental_indicators + social_indicators + governance_indicators}
    
    # Ph·∫ßn m√¥i tr∆∞·ªùng
    st.subheader("1. Ch·ªâ s·ªë M√¥i tr∆∞·ªùng (Environmental)")
    env_cols = st.columns(2)
    
    for i, indicator in enumerate(environmental_indicators):
        # S·ª≠ d·ª•ng callback ƒë·ªÉ c·∫≠p nh·∫≠t session_state
        def update_value(indicator_name):
            def callback():
                st.session_state.all_values[indicator_name] = st.session_state[f"env_{indicator_name}"]
            return callback
        
        # S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ session_state l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        env_cols[i % 2].slider(
            f"{indicator}",
            min_value=0.0,
            max_value=100.0,
            value=st.session_state.all_values[indicator],
            help="K√©o thanh tr∆∞·ª£t ƒë·ªÉ ƒëi·ªÅu ch·ªânh gi√° tr·ªã",
            key=f"env_{indicator}",
            on_change=update_value(indicator)
        )
    
    # Ph·∫ßn x√£ h·ªôi
    st.subheader("2. Ch·ªâ s·ªë X√£ h·ªôi (Social)")
    soc_cols = st.columns(2)
    
    for i, indicator in enumerate(social_indicators):
        def update_value(indicator_name):
            def callback():
                st.session_state.all_values[indicator_name] = st.session_state[f"soc_{indicator_name}"]
            return callback
            
        soc_cols[i % 2].slider(
            f"{indicator}",
            min_value=0.0,
            max_value=100.0,
            value=st.session_state.all_values[indicator],
            help="K√©o thanh tr∆∞·ª£t ƒë·ªÉ ƒëi·ªÅu ch·ªânh gi√° tr·ªã",
            key=f"soc_{indicator}",
            on_change=update_value(indicator)
        )
    
    # Ph·∫ßn qu·∫£n tr·ªã
    st.subheader("3. Ch·ªâ s·ªë Qu·∫£n tr·ªã (Governance)")
    gov_cols = st.columns(2)
    
    for i, indicator in enumerate(governance_indicators):
        def update_value(indicator_name):
            def callback():
                st.session_state.all_values[indicator_name] = st.session_state[f"gov_{indicator_name}"]
            return callback
            
        gov_cols[i % 2].slider(
            f"{indicator}",
            min_value=0.0,
            max_value=100.0,
            value=st.session_state.all_values[indicator],
            help="K√©o thanh tr∆∞·ª£t ƒë·ªÉ ƒëi·ªÅu ch·ªânh gi√° tr·ªã",
            key=f"gov_{indicator}",
            on_change=update_value(indicator)
        )
    
    # T√≠nh ƒëi·ªÉm ESG khi nh·∫•n n√∫t
    if st.button("T√≠nh ƒëi·ªÉm ESG", key="manual_calc_button"):
        # S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ session_state
        input_df = pd.DataFrame([st.session_state.all_values])
        
        # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
        st.write("D·ªØ li·ªáu t·ª´ c√°c thanh tr∆∞·ª£t:")
        st.dataframe(input_df)
        
        # T√≠nh ƒëi·ªÉm ESG
        results = calculate_esg_score(input_df)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.header("K·∫øt qu·∫£ ƒê√°nh gi√° ESG")
        display_results(results)
        
        # Ki·ªÉm tra d·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh n·∫øu c√≥
        if model is not None and scaler and feature_order is not None:
            try:
                st.subheader("D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh h·ªçc m√°y")
                
                # ƒê·∫£m b·∫£o d·ªØ li·ªáu c√≥ ƒë√∫ng c√°c c·ªôt m√† m√¥ h√¨nh y√™u c·∫ßu
                required_features = feature_order
                st.write(f"M√¥ h√¨nh y√™u c·∫ßu {len(required_features)} ƒë·∫∑c tr∆∞ng")
                    
                # Ki·ªÉm tra v√† hi·ªÉn th·ªã c√°c c·ªôt thi·∫øu
                missing_features = [f for f in required_features if f not in input_df.columns]
                if missing_features:
                    st.warning(f"Thi·∫øu {len(missing_features)} c·ªôt: {', '.join(missing_features[:5])}...")
                    
                # T·∫°o dataframe m·ªõi v·ªõi ƒë√∫ng c√°c c·ªôt
                aligned_data = pd.DataFrame(index=input_df.index)
                for feature in required_features:
                    if feature in input_df.columns:
                        aligned_data[feature] = input_df[feature]
                    else:
                        aligned_data[feature] = 50.0  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                    
                # Chu·∫©n h√≥a d·ªØ li·ªáu
                X_scaled = scaler.transform(aligned_data)
                    
                # D·ª± ƒëo√°n
                predicted_score_range = model.predict(X_scaled)
                predicted_proba = model.predict_proba(X_scaled)
                    
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
                st.success(f"Ph√¢n lo·∫°i d·ª± ƒëo√°n: {predicted_score_range[0]}")
                    
                # Hi·ªÉn th·ªã x√°c su·∫•t
                st.write("X√°c su·∫•t cho t·ª´ng ph√¢n lo·∫°i:")
                proba_df = pd.DataFrame(
                    [predicted_proba[0]],
                    columns=model.classes_
                )
                st.dataframe(proba_df)

            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")
                st.error(f"Chi ti·∫øt l·ªói: {str(e)}")

# Ch·∫ø ƒë·ªô upload file d·ªØ li·ªáu
elif evaluation_mode == "Upload file d·ªØ li·ªáu":
    st.header("Upload d·ªØ li·ªáu ESG")
    
    uploaded_file = st.file_uploader("Ch·ªçn file CSV ho·∫∑c Excel", type=['csv', 'xlsx'])
    
    if uploaded_file is not None:
        try:
            # X√°c ƒë·ªãnh lo·∫°i file v√† ƒë·ªçc d·ªØ li·ªáu
            if uploaded_file.name.endswith('.csv'):
                data = pd.read_csv(uploaded_file)
            else:
                data = pd.read_excel(uploaded_file)
            
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu
            st.subheader("D·ªØ li·ªáu ƒë√£ t·∫£i")
            st.dataframe(data.head())
            
            # Ng∆∞·ªùi d√πng x√°c nh·∫≠n c·ªôt nƒÉm/th·ªùi gian n·∫øu c√≥
            has_time_col = st.checkbox("D·ªØ li·ªáu c√≥ c·ªôt nƒÉm/th·ªùi gian?")
            
            time_col = None
            if has_time_col:
                time_cols = data.columns.tolist()
                time_col = st.selectbox("Ch·ªçn c·ªôt nƒÉm/th·ªùi gian", time_cols)
                if time_col:
                    data.set_index(time_col, inplace=True)
            
            # T√≠nh ƒëi·ªÉm ESG v√† hi·ªÉn th·ªã
            if st.button("Ph√¢n t√≠ch ESG"):
                # T√≠nh ƒëi·ªÉm ESG
                results = calculate_esg_score(data)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng quan
                st.header("K·∫øt qu·∫£ ƒê√°nh gi√° ESG")
                
                # N·∫øu c√≥ nhi·ªÅu d√≤ng d·ªØ li·ªáu
                if len(results) > 1:
                    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
                    result_table = results[['E_score', 'S_score', 'G_score', 'ESG_score', 'score_range']]
                    result_table['E_score'] = result_table['E_score'] * 10
                    result_table['S_score'] = result_table['S_score'] * 10
                    result_table['G_score'] = result_table['G_score'] * 10
                    
                    st.dataframe(result_table)
                    
                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo th·ªùi gian n·∫øu c√≥
                    if has_time_col:
                        st.subheader("Xu h∆∞·ªõng ƒëi·ªÉm ESG theo th·ªùi gian")
                        
                        fig, ax = plt.subplots(figsize=(12, 6))
                        ax.plot(results.index, results['E_score']*10, 'g-', label='Environmental')
                        ax.plot(results.index, results['S_score']*10, 'b-', label='Social')
                        ax.plot(results.index, results['G_score']*10, 'r-', label='Governance')
                        ax.plot(results.index, results['ESG_score']/10, 'k--', label='ESG Overall (√∑10)')
                        ax.legend()
                        ax.set_title('ƒêi·ªÉm ESG qua c√°c nƒÉm')
                        ax.set_ylabel('ƒêi·ªÉm')
                        ax.grid(True)
                        
                        st.pyplot(fig)
                        
                        # Ph√¢n lo·∫°i hi·ªáu su·∫•t theo nƒÉm
                        st.subheader("Ph√¢n lo·∫°i hi·ªáu su·∫•t ESG theo nƒÉm")
                        
                        fig, ax = plt.subplots(figsize=(12, 6))
                        
                        colors = {'First Quartile': 'red', 'Second Quartile': 'orange', 
                                'Third Quartile': 'lightgreen', 'Fourth Quartile': 'darkgreen'}
                        
                        for score_range in results['score_range'].unique():
                            if pd.notna(score_range):
                                mask = results['score_range'] == score_range
                                ax.bar(results.index[mask], results['ESG_score'][mask], 
                                        color=colors.get(score_range, 'gray'), label=score_range)
                        
                        ax.axhline(y=25, color='r', linestyle='-', alpha=0.3)
                        ax.axhline(y=50, color='orange', linestyle='-', alpha=0.3)
                        ax.axhline(y=75, color='g', linestyle='-', alpha=0.3)
                        ax.set_title('Ph√¢n lo·∫°i hi·ªáu su·∫•t ESG')
                        ax.set_ylabel('ƒêi·ªÉm ESG')
                        ax.legend()
                        
                        st.pyplot(fig)
                else:
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cho m·ªôt d√≤ng d·ªØ li·ªáu
                    display_results(results)
                
                # N·∫øu model ƒë√£ ƒë∆∞·ª£c load, th·ª±c hi·ªán d·ª± ƒëo√°n
                if model is not None and scaler is not None:
                    st.subheader("D·ª± ƒëo√°n score range b·∫±ng m√¥ h√¨nh h·ªçc m√°y")
                    
                    # L·∫•y c√°c c·ªôt ƒë·∫∑c tr∆∞ng g·ªëc
                    feature_cols = [col for col in data.columns if not col.endswith('_percentile') 
                                and col not in ['E_score', 'S_score', 'G_score', 'ESG_score', 'score_range']]
                    
                    # # X·ª≠ l√Ω NaN
                    # X = data[feature_cols].fillna(data[feature_cols].mean())
                    
                    # # Chu·∫©n h√≥a d·ªØ li·ªáu
                    # X_scaled = scaler.transform(X)
                    if feature_order is not None:
                        # Ch·ªâ gi·ªØ ƒë√∫ng c√°c c·ªôt m√¥ h√¨nh y√™u c·∫ßu, theo ƒë√∫ng th·ª© t·ª±
                        aligned_data = data.reindex(columns=feature_order, fill_value=50.0)
                    else:
                        # Fallback n·∫øu kh√¥ng c√≥ file ƒë·∫∑c tr∆∞ng
                        aligned_data = data[feature_cols].fillna(data[feature_cols].mean())

                    X_scaled = scaler.transform(aligned_data)

                    # D·ª± ƒëo√°n
                    predicted_score_range = model.predict(X_scaled)
                    predicted_proba = model.predict_proba(X_scaled)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
                    pred_results = pd.DataFrame({
                        'Actual_score_range': results['score_range'],
                        'Predicted_score_range': predicted_score_range
                    })
                    
                    st.dataframe(pred_results)
                    
                    # Hi·ªÉn th·ªã x√°c su·∫•t d·ª± ƒëo√°n
                    st.subheader("X√°c su·∫•t thu·ªôc v·ªÅ m·ªói score range")
                    
                    proba_df = pd.DataFrame(
                        predicted_proba, 
                        columns=model.classes_,
                        index=data.index if hasattr(data, 'index') else range(len(data))
                    )
                    
                    st.dataframe(proba_df)

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω file: {e}")

# Ch·∫ø ƒë·ªô train m√¥ h√¨nh m·ªõi
else:
    st.header("Train m√¥ h√¨nh ESG m·ªõi")
    
    st.markdown("""
    ƒê·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh m·ªõi, vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß ch·ª©a c√°c ch·ªâ s·ªë ESG. 
    M√¥ h√¨nh s·∫Ω ƒë∆∞·ª£c hu·∫•n luy·ªán ƒë·ªÉ d·ª± ƒëo√°n score range t·ª´ c√°c ch·ªâ s·ªë ESG.
    """)
    
    uploaded_file = st.file_uploader("Ch·ªçn file CSV ho·∫∑c Excel", type=['csv', 'xlsx'])
    
    if uploaded_file is not None:
        try:
            # X√°c ƒë·ªãnh lo·∫°i file v√† ƒë·ªçc d·ªØ li·ªáu
            if uploaded_file.name.endswith('.csv'):
                data = pd.read_csv(uploaded_file)
            else:
                data = pd.read_excel(uploaded_file)
            
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu
            st.subheader("D·ªØ li·ªáu ƒë√£ t·∫£i")
            st.dataframe(data.head())
            
            # Train m√¥ h√¨nh
            if st.button("Train m√¥ h√¨nh"):
                # T√≠nh ƒëi·ªÉm ESG
                esg_scored_data = calculate_esg_score(data)
                
                # Chu·∫©n b·ªã d·ªØ li·ªáu
                original_columns = [col for col in data.columns if not col.endswith('_percentile') 
                                and col not in ['E_score', 'S_score', 'G_score', 'ESG_score', 'score_range']]
                
                X = esg_scored_data[original_columns].fillna(esg_scored_data[original_columns].mean())
                y = esg_scored_data['score_range']
                
                # Lo·∫°i b·ªè c√°c d√≤ng c√≥ nh√£n NaN
                valid_indices = ~y.isna()
                X = X[valid_indices]
                y = y[valid_indices]
                
                if len(y) == 0:
                    st.error("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh!")
                else:
                    # Chia d·ªØ li·ªáu
                    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                    
                    # Chu·∫©n h√≥a d·ªØ li·ªáu
                    scaler = StandardScaler()
                    X_train_scaled = scaler.fit_transform(X_train)
                    X_test_scaled = scaler.transform(X_test)
                    
                    # Hu·∫•n luy·ªán m√¥ h√¨nh RandomForest
                    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                        model = RandomForestClassifier(n_estimators=100, random_state=42)
                        model.fit(X_train_scaled, y_train)
                    
                    # ƒê√°nh gi√° m√¥ h√¨nh
                    y_pred = model.predict(X_test_scaled)
                    
                    st.subheader("K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh:")
                    report = classification_report(y_test, y_pred, output_dict=True)
                    report_df = pd.DataFrame(report).transpose()
                    st.dataframe(report_df)
                    
                    # T√≠nh ƒë·ªô quan tr·ªçng c·ªßa c√°c ƒë·∫∑c tr∆∞ng
                    feature_importance = pd.DataFrame({
                        'Feature': original_columns,
                        'Importance': model.feature_importances_
                    }).sort_values('Importance', ascending=False)
                    
                    st.subheader("Top 10 ch·ªâ s·ªë quan tr·ªçng nh·∫•t:")
                    st.dataframe(feature_importance.head(10))
                    
                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒë·ªô quan tr·ªçng c·ªßa ƒë·∫∑c tr∆∞ng
                    fig, ax = plt.subplots(figsize=(10, 6))
                    top_features = feature_importance.head(10)
                    ax.barh(top_features['Feature'], top_features['Importance'])
                    ax.set_title('Top 10 ch·ªâ s·ªë ESG quan tr·ªçng nh·∫•t')
                    ax.set_xlabel('Importance')
                    plt.tight_layout()
                    st.pyplot(fig)
                    
                    # L∆∞u m√¥ h√¨nh
                    joblib.dump(model, 'esg_model.pkl')
                    joblib.dump(scaler, 'esg_scaler.pkl')
                    
                    st.success("ƒê√£ hu·∫•n luy·ªán v√† l∆∞u m√¥ h√¨nh th√†nh c√¥ng!")
                    
                    # T·∫°o n√∫t download m√¥ h√¨nh
                    with open('esg_model.pkl', 'rb') as f:
                        st.download_button('T·∫£i xu·ªëng m√¥ h√¨nh', f, file_name='esg_model.pkl')
                    
                    with open('esg_scaler.pkl', 'rb') as f:
                        st.download_button('T·∫£i xu·ªëng scaler', f, file_name='esg_scaler.pkl')

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω file: {e}")

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ESG
with st.expander("Th√¥ng tin v·ªÅ ESG"):
    st.markdown("""
    ### Environmental, Social, and Governance (ESG)
    
    **ESG** l√† m·ªôt khung ƒë√°nh gi√° t√≠nh b·ªÅn v·ªØng v√† t√°c ƒë·ªông x√£ h·ªôi c·ªßa m·ªôt d·ª± √°n, doanh nghi·ªáp ho·∫∑c qu·ªëc gia, bao g·ªìm ba tr·ª• c·ªôt:
    
    1. **Environmental (M√¥i tr∆∞·ªùng):** ƒê√°nh gi√° t√°c ƒë·ªông ƒë·∫øn m√¥i tr∆∞·ªùng t·ª± nhi√™n nh∆∞ ph√°t th·∫£i carbon, s·ª≠ d·ª•ng nƒÉng l∆∞·ª£ng, qu·∫£n l√Ω ch·∫•t th·∫£i, v√† b·∫£o t·ªìn t√†i nguy√™n thi√™n nhi√™n.
    
    2. **Social (X√£ h·ªôi):** Xem x√©t c√°c v·∫•n ƒë·ªÅ x√£ h·ªôi nh∆∞ ƒëi·ªÅu ki·ªán lao ƒë·ªông, quy·ªÅn con ng∆∞·ªùi, ƒëa d·∫°ng v√† h√≤a nh·∫≠p, t√°c ƒë·ªông ƒë·∫øn c·ªông ƒë·ªìng ƒë·ªãa ph∆∞∆°ng.
    
    3. **Governance (Qu·∫£n tr·ªã):** ƒê√°nh gi√° c√°c kh√≠a c·∫°nh v·ªÅ qu·∫£n tr·ªã nh∆∞ minh b·∫°ch, tr√°ch nhi·ªám gi·∫£i tr√¨nh, ch·ªëng tham nh≈©ng, ƒë·∫°o ƒë·ª©c kinh doanh.
    
    ### Ph√¢n lo·∫°i score range:
    
    - **First Quartile (0-25)**: Hi·ªáu su·∫•t ESG k√©m
    - **Second Quartile (26-50)**: Hi·ªáu su·∫•t ESG kh√°
    - **Third Quartile (51-75)**: Hi·ªáu su·∫•t ESG t·ªët
    - **Fourth Quartile (76-100)**: Hi·ªáu su·∫•t ESG xu·∫•t s·∫Øc
    """)

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center'>
        <p>Developed by Data4ESGenius Team | ESG Evaluation Tool ¬© 2023</p>
    </div>
    """, 
    unsafe_allow_html=True
)